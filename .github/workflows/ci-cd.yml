name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    # Getting the SDK dependencies we need for both our application and sonarcloud/sonarscanner
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Set up JDK 11 
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
        
    # Getting the actual packages and scanner
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
    # Installing our SonarCloud scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    
    #Restore dependencies .NET application
    - name: Restore dependencies
      run: dotnet restore wk6-DevOps/RRWebUI # The filepath will differ for yours
      
    # Unit Testing
    - name: Test
      run: dotnet test wk6-DevOps/ --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      
    #Build and have scanner analyze our code
    #When running the long run command make sure you edit the filepaths to the correct one in your repository
    - name: Build and analyze
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"211004-Reston-NET_Training-code" /o:"211004-reston-net" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.exclusions="**RRWebUI/wwwroot/lib/**" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.vs.vstest.reportsPaths="**/TestResult/*trx"
          dotnet build wk6-DevOps/RRWebUI --configuration Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  #Job to deploying our repository to the Azure webapp
  deploy:
    needs: build
    runs-on: ubuntu-latest # Using ubuntu this time
    environment:
      name: 'Production' # Let's us setup an environment named publish and you can see it in my repository
      
    steps:
    #Sets our SDK again
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    #Creates publish folder to be deployed to our webapp
    - name: Publish
      run: dotnet publish wk6-DevOps/ --configuration Release -o ./publish
      
    #Deploying our app to azure web app
    - name: Deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: 211004-RR-Web-App # Replace this with your web app name
        slot-name: 'Production'
        publish-profile: ${{secrets.AZURE_WEBAPP_PUBLISH_PROFILE}} # Make sure you have a secret publish folder obtained from Azure
        package: ./publish #This filepath might change depending on your repo
      
  dockerize:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Check out code

    - uses: mr-smithers-excellent/docker-build-push@v5
      name: Build & push Docker image
      with:
        image: scifiler/MVCwebapp
        tags: v1, latest
        registry: docker.io
        dockerfile: wk6-DevOps/
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }} 
    
